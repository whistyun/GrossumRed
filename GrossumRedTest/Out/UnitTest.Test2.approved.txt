#line 1 "test"
using System;
#line default

#line 3 "test"
namespace Hoge
{
#line default

#line 5 "test"
using System.Linq;
#line default

#line 7 "test"
public class VmCls2 : System.Object
    
#line default
,System.ComponentModel.INotifyPropertyChanged{
public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

#line 9 "test"
private double _innerField1;
#line default

#line 10 "test"
private double _innerField2 = 12;
#line default

#line 11 "test"
private double _innerField3 = System.Linq.Enumerable(0, 10).Select((itm, idx) =>
        {
            if (itm % 2 == 0 && idx % 4 == 0)
            {
                return itm;
            }
            else
            {
                return itm + idx;
            }
        });
#line default

#line 22 "test"
public event Action<string> ViewEvent;
#line default

#line 24 "test"
public int PropertyA {
#line default

get{ return __PropertyA; }

set {
    if(Object.ReferenceEquals(__PropertyA, value)) return;
    
    if(Object.ReferenceEquals(__PropertyA, null) || !__PropertyA.Equals(value)) 
    {
        __PropertyA = value;
        
        if(PropertyChanged!=null)
        {
            PropertyChanged.Invoke(
                this,
                new System.ComponentModel.PropertyChangedEventArgs("PropertyA"));


        }
    }
}

#line 24 "test"
}
#line default
private int  __PropertyA ;
#line 24 "test"


        void PrintText1(string txt)
        {
            int idx = 0;
            foreach (var ch in txt)
            {
                Console.WriteLine($"char[{idx++}]: \"{ch}\"\"");
            }
            // }
            /* } */
            var ch1 = '}';
            var txt1 = @"""}";
            var txt2 = "}";
        }
#line default

#line 41 "test"
public string PropertyB {
#line default

get{ return __PropertyB; }

set {
    if(Object.ReferenceEquals(__PropertyB, value)) return;
    
    if(Object.ReferenceEquals(__PropertyB, null) || !__PropertyB.Equals(value)) 
    {
        __PropertyB = value;
        
        if(PropertyChanged!=null)
        {
            PropertyChanged.Invoke(
                this,
                new System.ComponentModel.PropertyChangedEventArgs("PropertyB"));

#line 40 "test"
        PropertyBChanged();
#line default
        }
    }
}

#line 41 "test"
}
#line default
private string  __PropertyB ;
#line 41 "test"


        void PrintText2(string txt) => PrintText1(txt);
#line default

#line 44 "test"
}
#line default

#line 45 "test"
}
#line default
