@namespace GrossumRed.Parser
@classname VMCSharp
@using System.Linq
@using Microsoft.CodeAnalysis.CSharp
@using Microsoft.CodeAnalysis.CSharp.Syntax
@members
{
    private static ParseResult<T> ParseHelper<T>(ref Cursor cursor, T syntax)
        where T : CSharpSyntaxNode
    {
        if (syntax.Span.IsEmpty)
        {
            return null;
        }

        var start = cursor;
        cursor = start.Advance(syntax.FullSpan.End);
        return new ParseResult<T>(start, cursor, syntax);
    }

    private static IList<T> Union<T>(T first, IEnumerable<T> seconds){
        var lst = new List<T>();
        lst.Add(first);
        if(seconds!=null){
            lst.AddRange(seconds);
        }
        return lst;
    }
}

VMCSharpSyntax <SyntaxInfo> -lexical = 
    ( [ \t]* ln )+ {new SyntaxInfo(SyntaxType.Whitespace)} /
    (<SyntaxInfo> [ \t]* part:VMCSharpPart {part})

VMCSharpPart <SyntaxInfo> = 
    StartDefNamespace /
    StartDefClass /
    StartDefProp /
    PropGetter /
    PropSetter /
    PropGetterOrSetterWithProc /
    UsingList /
    AttributeList /
    DefEvent /
    DefField /
    DefMethod /
    ( comment / bcomment )+  {new SyntaxInfo(SyntaxType.Comment)} /
    EoB


StartDefNamespace <SyntaxInfo> =
        "namespace" __  type:Name __?  "{"
    {
        new SyntaxInfo(SyntaxType.StartNamespace)
    }

StartDefClass <ClassInfo> =
        lv:( alv:accessLv __ {alv} )? has:( "partial" __ )? "class" __  type:Name __? 
        inh:(<IList<string>> ":" __? inhc:Name  inhi:( __? "," __? inhis:Name {inhis} )* { Union(inhc, inhi)} )? __? "{"
    {
        new ClassInfo(lv.FirstOrDefault(), has.Count>0, type, inh.FirstOrDefault())
    }

StartDefProp <PropInfo> = clbk:CallbackMark? ignore:IgnoreMark? pinf:PropertyMark
    {
        new PropInfo(
                pinf.AccessLevelLabel, pinf.StyleName, pinf.Name, 
                clbk.FirstOrDefault(),
                ignore.Count!=0)
    }
    IgnoreMark   -lexical = "@ignore" [ \t]* ln
    CallbackMark -lexical = clbk:(<string> "@callback"i __ mthdnm:methodName [ \t]* ln {mthdnm})
        {
            clbk
        }
    PropertyMark <PropInfo> -lexical = [ \t]* lv:( alv:accessLv __ {alv} )? type:Type __? name:Name  __? "{"
        {
            new PropInfo(lv.FirstOrDefault(), type, name, null, false)
        }
    methodName = [a-zA-Z] [_a-zA-Z0-9]* ("<" Name ( "," __ Name )*  ">")? ( "(" exportedParameterList ");" )?

DefField <SyntaxInfo> =
        lv:(alv:accessLv __ {alv})? ( "static"/"readonly"/"const" __ )? Type __? Name __? tail:("="/";") 
        {
            tail=="="? 
                new SyntaxInfo(SyntaxType.StartFieldWithInit):
                new SyntaxInfo(SyntaxType.DefField)
        }

DefEvent <SyntaxInfo> =
        lv:(alv:accessLv __ {alv})? "event" __ Type __? Name __? ";"
        {
            new SyntaxInfo(SyntaxType.DefEvent)
        }

DefMethod <SyntaxInfo> =
        lv:(alv:accessLv __ {alv})? ( "static"/"readonly"/"const" __ )? Type __? Name __? 
        "(" plst:exportedParameterList ")" __? tail:("=>"/"{")
        {
            tail=="=>"? 
                new SyntaxInfo(SyntaxType.StartMethodWithLambda):
                new SyntaxInfo(SyntaxType.StartMethodWithBlock)
        }


PropGetter <SyntaxInfo> =
        lv:(alv:accessLv __ {alv})? "get;"
    {
        new PropGetter(lv.FirstOrDefault())
    }

PropSetter <SyntaxInfo> =
        lv:(alv:accessLv __ {alv})? "set;"
    {
        new PropSetter(lv.FirstOrDefault())
    }

PropGetterOrSetterWithProc <SyntaxInfo> =
        lv:(alv:accessLv __ {alv})? ("set"/"get") __ tail:("=>"/"{")
    {
        tail=="=>"? 
            new SyntaxInfo(SyntaxType.PropGetterOrSetterWithLambda):
            new SyntaxInfo(SyntaxType.PropGetterOrSetterWithBlock)
    }


UsingList <SyntaxInfo> =
        (useNamespace3 / useNamespace2 / useNamespace1)
        ( __ (useNamespace3 / useNamespace2 / useNamespace1) )*
    {
        new SyntaxInfo(SyntaxType.Using)
    }
    useNamespace1 = "using" __ Name   ";"
    useNamespace2 = "using" __ Name "=" __ Name  ";"
    useNamespace3 = "using" __ "static" __ Name ";"

AttributeList <AttributeInfoCollection> =
        f:internalAttribute
        s:(<AttributeInfo> __ s2:internalAttribute {s2})* 
    {
        new AttributeInfoCollection(f, s)
    }
    internalAttribute <AttributeInfo> =
        "[" nm:Name "(" plst:exportedParameterList ")" "]" 
        {
            new AttributeInfo(nm, plst)
        }/
        "[" nm:Name "]" 
        {
            new AttributeInfo(nm)
        }

EoB <SyntaxInfo> = "}"
    {
        new SyntaxInfo(SyntaxType.BlockEnd)
    }

Type <string> = e:exportedType { e.ToFullString() }
    exportedType <TypeSyntax > = 
        #parse{
            ParseHelper(ref state, SyntaxFactory.ParseTypeName(state.Subject, state.Location, consumeFullText: false))
        }

Name <string> = e:exportedName { e.ToFullString() }
    exportedName <NameSyntax> = 
        #parse{
            ParseHelper(ref state, SyntaxFactory.ParseName(state.Subject, state.Location, consumeFullText: false))
        }

exportedParameterList <BracketedParameterListSyntax> = 
    #parse{
        ParseHelper(ref state, SyntaxFactory.ParseBracketedParameterList(state.Subject, state.Location, consumeFullText: false))
    }


accessLv = "protected" __ "internal" / "internal" __ "protected" / "public" / "protected" / "internal" / "private"

__ =  ( [ \t\r\n] / comment / bcomment )+

comment = "//" [^\r\n]*
bcomment = "/*" (!"*/" .)* "*/"

ln = ("\r\n" / "\r" / "\n")